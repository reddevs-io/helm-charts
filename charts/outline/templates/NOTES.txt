1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "outline.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "outline.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "outline.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "outline.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Outline Configuration:
{{- if .Values.redis.enable }}
   - Redis is enabled and will be deployed as part of this release
{{- else }}
   - Redis is disabled. Configure REDIS_URL in environment variables if using external Redis
{{- end }}
{{- if .Values.postgres.enable }}
   - PostgreSQL is enabled and will be deployed as part of this release
{{- else }}
   - PostgreSQL is disabled. Configure DATABASE_URL in environment variables if using external database
{{- end }}

3. Important Notes:
   - Make sure to configure authentication providers (Google, Azure, Discord, etc.) in the secret environment variables
   - Set SECRET_KEY and UTILS_SECRET to secure random values
   - Configure your URL environment variable to match your ingress/service configuration
   - For production use, enable persistence for data storage
{{- if .Values.persistence.enabled }}
   - Persistence is enabled with {{ .Values.persistence.size }} storage
{{- else }}
   - Persistence is disabled - data will be lost on pod restart
{{- end }}

4. First-time Setup:
   - After deployment, access Outline and complete the initial setup
   - Configure your authentication provider
   - Create your first team and workspace

For more information about Outline configuration, visit: https://docs.getoutline.com/
