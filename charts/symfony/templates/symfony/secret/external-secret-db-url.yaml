{{- if and .Values.externalSecretsDbUrl.enabled .Values.externalSecretsDbUrl.awsProvider.enabled }}
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: {{ include "symfony.fullname" . }}-db
  labels:
    {{- include "symfony.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "0"
spec:
  refreshInterval: {{ .Values.externalSecretsDbUrl.refreshInterval }}
  secretStoreRef:
    name: {{ include "symfony.fullname" . }}-db
    kind: SecretStore
  target:
    name: {{ include "symfony.fullname" . }}-db-eso
    creationPolicy: Owner
    template:
      engineVersion: v2
      type: Opaque
      data:
        DATABASE_URL: |
          {{`{{- $engine := `}}"{{ .Values.externalSecretsDbUrl.data.engine }}"{{` -}}
          {{- $host := `}}"{{ .Values.externalSecretsDbUrl.data.host }}"{{` -}}
          {{- $port := `}}"{{ .Values.externalSecretsDbUrl.data.port }}"{{` -}}
          {{- $dbname := `}}"{{ .Values.externalSecretsDbUrl.data.dbName }}"{{` -}}
          {{- $username := .username | urlquery -}}
          {{- $password := .password | urlquery -}}
          {{ $engine }}://{{ $username }}:{{ $password }}@{{ $host }}:{{ $port }}/{{ $dbname }}`}}
  data:
    - secretKey: username
      remoteRef:
        key: {{ .Values.externalSecretsDbUrl.rdsSecretKey }}
        property: username
    - secretKey: password
      remoteRef:
        key: {{ .Values.externalSecretsDbUrl.rdsSecretKey }}
        property: password
{{- end }}
